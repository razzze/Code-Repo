
// Given nodes from 0.....N-1
// M edges a->b of wt=c
// Print shortest path from st to en


#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
 
using namespace __gnu_pbds; 
 
#define ordered_multiset tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
 
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define rep(i, x, y)   for (__typeof(x) i = x; i < y; i++)
#define repr(i, x, y)   for (__typeof(x) i = x; i > y; i --)
#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define rSort(x)                    sort((x).rbegin(),(x).rend())
#define X                           first
#define Y                           second
#define sep                         ' '
#define SZ(x)                       ll(x.size())
#define pb                          push_back
#define pf                          push_front
#define mp                          make_pair
#define endl                        "\n"
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef vector<ll> vll;
#define first X
#define second Y
 
const ll N = 1e15 + 10;
const ll M = 1e9 + 7;
 
long long binpow(long long a, long long b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1){
            res = res * a;
            res%=M;
        }
        a = a * a;
        a%=M;
        b >>= 1;
    }
    return res%M;
}

 
void fnc(){
    ll n,m,a,b,c,st,en;
    cin >> n >> m >> st >> en;
    vector<pll> adj[n];
    vll vis(n,N), parent(n,-1);
    vector<bool> visited(n);
    rep(i,0,m){
        cin >> a >> b >> c;
        adj[a].pb({b,c});
    }
    priority_queue<pll, vector<pll>, greater<pll> > pq;
    pq.push({0,st});
    vis[st]=0;
    while(!pq.empty()){
        ll cost = pq.top().first;
        ll cur = pq.top().second;
        pq.pop();
        if(cur==en){
            cout << cost <<sep;
            vll ans;
            ans.pb(cur);
            cur=parent[cur];
            while(cur!=-1){
               ans.pb(cur);
               cur=parent[cur];
            }
            cout << ans.size()-1 <<endl;
            reverse(ans.begin(),ans.end());
            rep(i,0,ans.size()-1){
                cout << ans[i] << sep << ans[i+1] <<endl;
            }
            return;
        }
        if(cost>vis[cur])continue;
        for(auto u: adj[cur]){
            if(vis[u.first]> cost + u.second){
                vis[u.first]=cost + u.second;
                pq.push({cost + u.second,u.first});
                parent[u.first]=cur;
            }
        }
    }
    cout << "-1";
 
}
 
int32_t main()
{
  IOS;
  int t=1;
  //cin >> t;
  while(t--){
  	fnc();
  	cout << endl;
  }
} 
